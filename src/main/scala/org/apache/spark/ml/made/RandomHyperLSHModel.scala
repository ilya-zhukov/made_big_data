package org.apache.spark.ml.made

import breeze.linalg.normalize

import scala.util.Random
import org.apache.hadoop.fs.Path
import org.apache.spark.ml.feature.{LSH, LSHModel}
import org.apache.spark.ml.linalg.{BLAS, Matrices, Matrix, Vector, VectorUDT, Vectors}
import org.apache.spark.ml.param.ParamMap
import org.apache.spark.ml.param.shared.HasSeed
import org.apache.spark.ml.util._
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.sql.Row
import org.apache.spark.sql.types.StructType


class RandomHyperLSHModel private[ml](
                                       override val uid: String,
                                       private[ml] val randUnitVectors: Array[Vector])
  extends LSHModel[RandomHyperLSHModel] {

  override def setInputCol(value: String): this.type = super.set(inputCol, value)

  override def setOutputCol(value: String): this.type = super.set(outputCol, value)

  override protected[ml] def hashFunction(elems: Vector): Array[Vector] = {
    val hashValues = randUnitVectors.map(
      randUnitVector => Math.signum(BLAS.dot(elems, randUnitVector))
    )
    hashValues.map(Vectors.dense(_))
  }

  override protected[ml] def keyDistance(x: Vector, y: Vector): Double = {
    //Vectors.norm(x, 2) // Math.sqrt(Vectors.sqdist(x, x)) / Math.sqrt(Vectors.sqdist(y, y))
    //x.dot(y) / Vectors.norm(x, 2) / Vectors.norm(y, 2)
    Math.abs( Math.acos(x.dot(y) / Vectors.norm(x, 2) / Vectors.norm(y, 2)) )
  }

  override protected[ml] def hashDistance(x: Seq[Vector], y: Seq[Vector]): Double = {
    // Since it's generated by hashing, it will be a pair of dense vectors.
    x.zip(y).map(vectorPair =>
      vectorPair._1.toArray.zip(vectorPair._2.toArray).count(pair => pair._1 != pair._2) / vectorPair._1.size
    ).sum
  }

  override def copy(extra: ParamMap): RandomHyperLSHModel = {
    val copied = new RandomHyperLSHModel(uid, randUnitVectors).setParent(parent)
    copyValues(copied, extra)
  }

  override def write: MLWriter = new RandomHyperLSHModel.RandomHyperLSHModelWriter(this)

  override def toString: String = {
    s"RandomHyperLSHModel: uid=$uid, numHashTables=${$(numHashTables)}"
  }
}


class RandomHyperLSH(override val uid: String) extends LSH[RandomHyperLSHModel] with HasSeed {

  override def setInputCol(value: String): this.type = super.setInputCol(value)

  override def setOutputCol(value: String): this.type = super.setOutputCol(value)

  override def setNumHashTables(value: Int): this.type = super.setNumHashTables(value)

  def this() = {
    this(Identifiable.randomUID("mh-lsh"))
  }

  def setSeed(value: Long): this.type = set(seed, value)

  override protected[ml] def createRawLSHModel(inputDim: Int): RandomHyperLSHModel = {
    require(inputDim <= RandomHyperLSH.HASH_PRIME,
      s"The input vector dimension $inputDim exceeds the threshold ${RandomHyperLSH.HASH_PRIME}.")
    val rand = new Random($(seed))
    val randUnitVectors: Array[Vector] = {
      Array.fill($(numHashTables)) {
        val randArray = Array.fill(inputDim)(rand.nextGaussian())
        Vectors.fromBreeze(normalize(breeze.linalg.Vector(randArray)))
      }
    }
    new RandomHyperLSHModel(uid, randUnitVectors)
  }

  override def transformSchema(schema: StructType): StructType = {
    SchemaUtils.checkColumnType(schema, $(inputCol), new VectorUDT)
    validateAndTransformSchema(schema)
  }

  override def copy(extra: ParamMap): this.type = defaultCopy(extra)
}

object RandomHyperLSH extends DefaultParamsReadable[RandomHyperLSH] {
  // A large prime smaller than sqrt(2^63 âˆ’ 1)
  private[ml] val HASH_PRIME = 2038074743

  override def load(path: String): RandomHyperLSH = super.load(path)
}

object RandomHyperLSHModel extends MLReadable[RandomHyperLSHModel] {

  override def read: MLReader[RandomHyperLSHModel] = new RandomHyperLSHModelReader

  override def load(path: String): RandomHyperLSHModel = super.load(path)

  private[RandomHyperLSHModel] class RandomHyperLSHModelWriter(instance: RandomHyperLSHModel)
    extends MLWriter {

    private case class Data(randUnitVectors: Matrix)

    override protected def saveImpl(path: String): Unit = {
      DefaultParamsWriter.saveMetadata(instance, path, sc)
      val numRows = instance.randUnitVectors.length
      require(numRows > 0)
      val numCols = instance.randUnitVectors.head.size
      val values = instance.randUnitVectors.map(_.toArray).reduce(Array.concat(_, _))
      val randMatrix = Matrices.dense(numRows, numCols, values)
      val data = Data(randMatrix)
      val dataPath = new Path(path, "data").toString
      sparkSession.createDataFrame(Seq(data)).repartition(1).write.parquet(dataPath)
    }
  }

  private class RandomHyperLSHModelReader extends MLReader[RandomHyperLSHModel] {

    /** Checked against metadata when loading model */
    private val className = classOf[RandomHyperLSHModel].getName

    override def load(path: String): RandomHyperLSHModel = {
      val metadata = DefaultParamsReader.loadMetadata(path, sc, className)

      val dataPath = new Path(path, "data").toString
      val data = sparkSession.read.parquet(dataPath)
      val Row(randUnitVectors: Matrix) = MLUtils.convertMatrixColumnsToML(data, "randUnitVectors")
        .select("randUnitVectors")
        .head()
      val model = new RandomHyperLSHModel(metadata.uid, randUnitVectors.rowIter.toArray)

      metadata.getAndSetParams(model)
      model
    }
  }
}

